{"version":3,"sources":["home/memo.js","index.js"],"names":["fetchItem","id","ob","start","Date","getTime","memo","f","cashe","Set","arg","key","JSON","stringify","memoFetchItem","res","console","time","name","timeEnd","log"],"mappings":";;ACAA;;;;ADAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,EAAD,EAAKC,EAAL,EAAY;AAC5B,MAAIC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;;AACA,SAAO,IAAID,IAAJ,GAAWC,OAAX,KAAuBF,KAAvB,GAA+B,IAAtC;AAA2C;AAA3C;;AACA;AAASF,IAAAA,EAAE,EAAFA;AAAT,KAAgBC,EAAhB;AACD,CAJD;;AAMA,IAAMI,IAAI,GAAG,SAAPA,IAAO,CAACC,CAAD,EAAO;AAClB,MAAIC,KAAK,GAAG,IAAIC,GAAJ,EAAZ;AACA,SAAO,YAAY;AAAA,sCAARC,GAAQ;AAARA,MAAAA,GAAQ;AAAA;;AACjB,QAAIC,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAeH,GAAf,CAAV;AACA,KAACF,KAAK,CAACG,GAAD,CAAN,KAAgBH,KAAK,CAACG,GAAD,CAAL,GAAaJ,CAAC,MAAD,SAAKG,GAAL,CAA7B;AACA,WAAOF,KAAK,CAACG,GAAD,CAAZ;AACD,GAJD;AAKD,CAPD;;AASA,IAAMG,aAAa,GAAGR,IAAI,CAACN,SAAD,CAA1B;AAEA,IAAIe,GAAJ;AACAC,OAAO,CAACC,IAAR,CAAa,UAAb;AACAF,GAAG,GAAGD,aAAa,CAAC,CAAD,EAAI;AAAEI,EAAAA,IAAI,EAAE;AAAR,CAAJ,CAAnB;AACAF,OAAO,CAACG,OAAR,CAAgB,UAAhB;AACAH,OAAO,CAACI,GAAR,CAAY,OAAZ,EAAqBL,GAArB;AAEAC,OAAO,CAACI,GAAR,CAAY,IAAZ;AAEAJ,OAAO,CAACC,IAAR,CAAa,YAAb;AACAF,GAAG,GAAGD,aAAa,CAAC,CAAD,EAAI;AAAEI,EAAAA,IAAI,EAAE;AAAR,CAAJ,CAAnB;AACAF,OAAO,CAACG,OAAR,CAAgB,YAAhB;AACAH,OAAO,CAACI,GAAR,CAAY,kBAAZ,EAAgCL,GAAhC","file":"02_files.e31bb0bc.js","sourceRoot":"..","sourcesContent":["/* \r\nЕсть функция fact котороя проводит сложные вычисления\r\nХотелось бы кешировать результаты выполнения этой функции, то есть \r\n\r\n- первый вызов - функция проводит вычисления и результат запоминается в кеше \r\n- повторный вызов функции -  результат возвращается из кеша\r\n  \r\nЗадание  - написать функцию memo которая будет мемоизировать результат \r\n*/\r\n\r\nconst fetchItem = (id, ob) => {\r\n  let start = new Date().getTime();\r\n  while (new Date().getTime() - start < 2000);\r\n  return { id, ...ob };\r\n};\r\n\r\nconst memo = (f) => {\r\n  let cashe = new Set();\r\n  return (...arg) => {\r\n    let key = JSON.stringify(arg);\r\n    !cashe[key] && (cashe[key] = f(...arg));\r\n    return cashe[key];\r\n  };\r\n};\r\n\r\nconst memoFetchItem = memo(fetchItem);\r\n\r\nlet res;\r\nconsole.time(\"NO_CACHE\");\r\nres = memoFetchItem(5, { name: \"Bill\" });\r\nconsole.timeEnd(\"NO_CACHE\");\r\nconsole.log(\"RES: \", res);\r\n\r\nconsole.log(\"\\n\");\r\n\r\nconsole.time(\"FROM_CACHE\");\r\nres = memoFetchItem(5, { name: \"Bill\" });\r\nconsole.timeEnd(\"FROM_CACHE\");\r\nconsole.log(\"res from cache: \", res);\r\n","import \"./home/memo\";\n"]}